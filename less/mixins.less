// Clear
.clearfix()
{
  &:before,
    &:after {
    visibility: hidden;
    display: table;
    font-size: 0;
    content: " ";
    height: 0;
  }
  &:after {
    clear: both;
  }
}

// Display
.display-hidden() {
  display: none !important;
  visibility: hidden !important;
}
.display-inherit() {
  display: inherit !important;
  visibility: visible !important;
}
.display-block() {
  display: block !important;
  visibility: visible !important;
}
.display-inline-block() {
  display: inline-block !important;
  visibility: visible !important;
}
.display-inline() {
  display: inline !important;
  visibility: visible !important;
}

// Position
.position-absolute() {
  position:absolute !important;
}
.position-fixed() {
  position:fixed !important;
}
.position-relative() {
  position:relative !important;
}

// Overflow
.overflow-x(@type-x: auto)
{
  overflow-x: @type-x;
}
.overflow-y(@type-y: auto)
{
  overflow-y: @type-y;
}
.overflow(@type-x: auto, @type-y: auto)
{
  .overflow-x(@type-x);
  .overflow-y(@type-y);
}
.overflow-hidden() {
  .overflow(hidden, hidden);
}
.overflow-x-hidden() {
  .overflow-x(hidden);
}
.overflow-y-hidden() {
  .overflow-y(hidden);
}
.overflow-visible() {
  .overflow(visible, visible);
}
.overflow-x-visible() {
  .overflow-x(visible);
}
.overflow-y-visible() {
  .overflow-y(visible);
}
.overflow-auto() {
  .overflow(auto, auto);
}
.overflow-x-auto() {
  .overflow-x(auto);
}
.overflow-y-auto() {
  .overflow-y(auto);
}

.overflow-scroll() {
  .overflow(scroll, scroll);
}
.overflow-x-scroll() {
  .overflow-x(scroll);
}
.overflow-y-scroll() {
  .overflow-y(scroll);
}

// Grid
.make-col(@row-cols, @index, @item) {
  @{item} {
    width: (((100% / @row-cols) - @col-left-right-margin) * @index) + (@col-left-right-margin * (@index - 1));
  }
}
.make-offset(@row-cols, @index, @item) {
  @{item} {
    margin-left: (((100% / @row-cols) - @col-left-right-margin) * @index) + (@col-left-right-margin * (@index + 0.5)) !important;
  }
}

.make-rows() {
  .row(@index) when (@index >= 1) and (@index =< @rows) {
    .make-row(@index);
    .row(@index + 1);
  }
  .row(1);
}

.make-row(@row-cols) {
  .col(@index) when (@index = 1) {
    @item: ~".row .col-@{row-cols}-@{index}, .row-container .col-@{row-cols}-@{index}";
    .make-col(@row-cols, @index, @item);
    @itemoffset: ~".row .offset-@{row-cols}-@{index}, .row-container .offset-@{row-cols}-@{index}";
    .make-offset(@row-cols, @index, @itemoffset);
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @row-cols) {
    @item: ~".row .col-@{row-cols}-@{index}, .row-container .col-@{row-cols}-@{index}";
    .make-col(@row-cols, @index, @item);
    @itemoffset: ~".row .offset-@{row-cols}-@{index}, .row-container .offset-@{row-cols}-@{index}";
    .make-offset(@row-cols, @index, @itemoffset);
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @row-cols) {
    @{list} {
      display: block;
      float: left;
      margin: @col-margin;
      box-sizing: border-box;
    }
    @itemoffset: ~".row .offset-0, .row-container .offset-0";
    @{itemoffset} {
      margin-left: @col-margin !important;
    }
  }
  .col(1);
}

.make-col-size(@row-cols, @size, @index, @item) {
  @{item} {
    width: (((100% / @row-cols) - @col-left-right-margin) * @index) + (@col-left-right-margin * (@index - 1));
  }
}

.make-offset-size(@row-cols, @size, @index, @item) {
  @{item} {
    margin-left: (((100% / @row-cols) - @col-left-right-margin) * @index) + (@col-left-right-margin * (@index + 0.5)) !important;
  }
}

.make-rows-size(@size) {
  .row(@index) when (@index >= 1) and (@index =< @rows) {
    .make-row-size(@index, @size);
    .row(@index + 1);
  }
  .row(1);
}

.make-row-size(@row-cols, @size) {
  .col(@index) when (@index = 1) {
    @item: ~".row .col-@{size}-@{row-cols}-@{index}, .row-container .col-@{size}-@{row-cols}-@{index}";
    .make-col-size(@row-cols, @size, @index, @item);
    @itemoffset: ~".row .offset-@{size}-@{row-cols}-@{index}, .row-container .offset-@{size}-@{row-cols}-@{index}";
    .make-offset-size(@row-cols, @size, @index, @itemoffset);
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @row-cols) {
    @item: ~".row .col-@{size}-@{row-cols}-@{index}, .row-container .col-@{size}-@{row-cols}-@{index}";
    .make-col-size(@row-cols, @size, @index, @item);
    @itemoffset: ~".row .offset-@{size}-@{row-cols}-@{index}, .row-container .offset-@{size}-@{row-cols}-@{index}";
    .make-offset-size(@row-cols, @size, @index, @itemoffset);
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @row-cols) {
    @{list} {
      display: block;
      float: left;
      margin: @col-margin;
      box-sizing: border-box;
    }
    @itemoffset: ~".row .offset-@{size}-0, .row-container .offset-@{size}-0";
    @{itemoffset} {
      margin-left: @col-margin !important;
    }
  }

  .col(1);
}